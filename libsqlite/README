The following is from: http://www.sqlite.org/about.html
About SQLite
SQLite is an in-process library that implements a self-contained, serverless,
zero-configuration, transactional SQL database engine. The code for SQLite is
in the public domain and is thus free for use for any purpose, commercial or
private. SQLite is currently found in more applications than we can count,
including several high-profile projects.

SQLite is an embedded SQL database engine. Unlike most other SQL databases,
SQLite does not have a separate server process. SQLite reads and writes
directly to ordinary disk files. A complete SQL database with multiple tables,
indices, triggers, and views, is contained in a single disk file. The database
file format is cross-platform - you can freely copy a database between 32-bit
and 64-bit systems or between big-endian and little-endian architectures.
These features make SQLite a popular choice as an Application File Format.
Think of SQLite not as a replacement for Oracle but as a replacement for fopen()

SQLite is a compact library. With all features enabled, the library size can
be less than 500KiB, depending on the target platform and compiler optimization
settings. (64-bit code is larger. And some compiler optimizations such as
aggressive function inlining and loop unrolling can cause the object code
to be much larger.) If optional features are omitted, the size of the SQLite
library can be reduced below 300KiB. SQLite can also be made to run in minimal
stack space (4KiB) and very little heap (100KiB), making SQLite a popular
database engine choice on memory constrained gadgets such as cellphones, PDAs,
and MP3 players. There is a tradeoff between memory usage and speed. SQLite
generally runs faster the more memory you give it. Nevertheless,
performance is usually quite good even in low-memory environments.

SQLite is very carefully tested prior to every release and has a reputation
for being very reliable. Most of the SQLite source code is devoted purely to
testing and verification. An automated test suite runs millions and millions
of test cases involving hundreds of millions of individual SQL statements and
achieves 100% branch test coverage. SQLite responds gracefully to memory
allocation failures and disk I/O errors. Transactions are ACID even if
interrupted by system crashes or power failures. All of this is verified by
the automated tests using special test harnesses which simulate system failures.
Of course, even with all this testing, there are still bugs. But unlike some
similar projects (especially commercial competitors) SQLite is open and honest
about all bugs and provides bugs lists including lists of critical bugs and
minute-by-minute chronologies of bug reports and code changes.

The SQLite code base is supported by an international team of developers who
work on SQLite full-time. The developers continue to expand the capabilities
of SQLite and enhance its reliability and performance while maintaining
backwards compatibility with the published interface spec, SQL syntax,
and database file format. The source code is absolutely free to anybody
who wants it, but professional support is also available.

We the developers hope that you find SQLite useful and we charge you to use it
well: to make good and beautiful products that are fast, reliable, and simple
to use. Seek forgiveness for yourself as you forgive others. And just as you
have received SQLite for free, so also freely give, paying the debt forward.


the version of this SQLite is 3.8.5, where can be downloade from:
http://www.sqlite.org/2014/sqlite-amalgamation-3080500.zip

compile sqlite3 to static library separately:
gcc -c sqlite3.c   // -c means compile without link
ar rcs libsqlite3.a sqlite3.o
 
